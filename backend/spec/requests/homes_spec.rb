# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/homes', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Home. As you add validations to Home, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      street_number: '1',
      street_name: 'Broadway',
      unit_number: '106',
      city: 'Cambridge',
      state: 'MA',
      zip_code: '02139',
      building_type: 'Apartment'
    }
  end

  let(:invalid_attributes) do
    {
      street_number: %w[CIC Rocks]
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Home.create! valid_attributes
      get homes_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      home = Home.create! valid_attributes
      get home_url(home), as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      home = Home.create! valid_attributes
      get edit_home_url(home), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Home' do
        expect do
          post homes_url, params: { home: valid_attributes }, as: :json
        end.to change(Home, :count).by(1)
      end

      it 'renders a sucessful response' do
        post homes_url, params: { home: valid_attributes }, as: :json
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested home' do
        home = Home.create! valid_attributes
        patch home_url(home), params: { home: new_attributes }
        home.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the home' do
        home = Home.create! valid_attributes
        patch home_url(home), params: { home: new_attributes }
        home.reload
        expect(response).to redirect_to(home_url(home))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested home' do
      home = Home.create! valid_attributes
      expect do
        delete home_url(home), as: :json
      end.to change(Home, :count).by(-1)
    end

    it 'returns status no_content' do
      home = Home.create! valid_attributes
      delete home_url(home), as: :json
      expect(response).to have_http_status(:no_content)
    end
  end
end
