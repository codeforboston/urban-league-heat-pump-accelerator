# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/survey_visits', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # SurveyVisit. As you add validations to SurveyVisit, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    surveyor = create(:surveyor)
    home = create(:home)
    survey = create(:survey)
    survey_question = create(:survey_question)
    {
      surveyor_id: surveyor.id,
      home_id: home.id,
      survey_response_attributes: {
        survey_id: survey.id,
        survey_answers_attributes: [{
          survey_question_id: survey_question.id,
          answer: 'Yes'
        }]
      }
    }
  end

  let(:invalid_attributes) do
    {
      surveyor_id: 'dev',
      home_id: 'null',
      survey_response_attributes: {
        survey_id: 'null',
        survey_answers_attributes: [{
          survey_question_id: 'null',
          answer: 5
        }]
      }
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      SurveyVisit.create! valid_attributes
      get survey_visits_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      survey_visit = SurveyVisit.create! valid_attributes
      get survey_visit_url(survey_visit), as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_survey_visit_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new SurveyVisit' do
        expect do
          post survey_visits_url, params: { survey_visit: valid_attributes }, as: :json
        end.to change(SurveyVisit, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new SurveyVisit' do
        expect do
          post survey_visits_url, params: { survey_visit: invalid_attributes }, as: :json
        end.to change(SurveyVisit, :count).by(0)
      end

      it 'renders a response with 422 status' do
        post survey_visits_url, params: { survey_visit: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      it 'updates the requested survey_visit' do
        survey_visit = create(:survey_visit)
        valid_attributes_without_answer = {
          surveyor_id: valid_attributes[:surveyor_id],
          home_id: valid_attributes[:home_id],
          survey_response_attributes: {
            survey_id: valid_attributes[:survey_response_attributes][:survey_id],
            survey_answers_attributes: [{
              survey_question_id: valid_attributes[:survey_response_attributes][:survey_answers_attributes][0][:survey_question_id],
              answer: 'No'
            }]
          }
        }
        patch survey_visit_url(survey_visit), params: { survey_visit: valid_attributes_without_answer }, as: :json
        survey_visit.reload
        expect(response).to be_successful
      end
    end

    context 'with invalid parameters' do
      it 'renders a response with 422 status' do
        survey_visit = SurveyVisit.create! valid_attributes
        patch survey_visit_url(survey_visit), params: { survey_visit: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested survey_visit' do
      survey_visit = SurveyVisit.create! valid_attributes
      expect do
        delete survey_visit_url(survey_visit), as: :json
      end.to change(SurveyVisit, :count).by(-1)
    end
  end
end
