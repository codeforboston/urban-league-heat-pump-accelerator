# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/survey_visits', type: :request do
  include Devise::Test::IntegrationHelpers
  # This should return the minimal set of attributes required to create a valid
  # SurveyVisit. As you add validations to SurveyVisit, be sure to
  # adjust the attributes here as well.
  let(:survey) { create(:survey) }
  let(:survey_visit) { create(:survey_visit) }
  let(:home) { survey_visit.home }
  let(:localized_survey_question) { create(:localized_survey_question) }
  let(:survey_question) { localized_survey_question.survey_question }
  let(:surveyor) { create(:surveyor) }
  let(:valid_attributes) do
      {
        surveyor_id: surveyor.id,
        home_id: home.id,
        survey_response_attributes: {
          survey_id: survey.id,
          survey_answers_attributes: [
            {
              survey_question_id: survey_question.id,
              answer: 1
            }
          ]
        }
      }
    # params.require(:survey_visit)
    #       .permit(:surveyor_id, :home_id,
    #               survey_response_attributes: [:survey_id, :completed,
    #                                            { survey_answers_attributes: %i[survey_question_id answer] }])
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      sign_in surveyor.user
      SurveyVisit.create! valid_attributes
      get survey_visits_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      sign_in surveyor.user
      survey_visit = SurveyVisit.create! valid_attributes
      get survey_visit_url(survey_visit), as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_survey_visit_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new SurveyVisit' do
        expect do
          post survey_visits_url, params: { survey_visit: valid_attributes }, as: :json
        end.to change(SurveyVisit, :count).by(1)
      end

      it 'redirects to the created survey_visit' do
        post survey_visits_url, params: { survey_visit: valid_attributes }, as: :json
        expect(response).to be_successful
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new SurveyVisit' do
        expect do
          post survey_visits_url, params: { survey_visit: invalid_attributes }
        end.to change(SurveyVisit, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post survey_visits_url, params: { survey_visit: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested survey_visit' do
        survey_visit = SurveyVisit.create! valid_attributes
        patch survey_visit_url(survey_visit), params: { survey_visit: new_attributes }
        survey_visit.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the survey_visit' do
        survey_visit = SurveyVisit.create! valid_attributes
        patch survey_visit_url(survey_visit), params: { survey_visit: new_attributes }
        survey_visit.reload
        expect(response).to redirect_to(survey_visit_url(survey_visit))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        survey_visit = SurveyVisit.create! valid_attributes
        patch survey_visit_url(survey_visit), params: { survey_visit: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
